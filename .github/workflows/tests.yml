name: Tests

on:
  - push
  - pull_request

jobs:
  test-mvn-livecycle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "8"
          check-latest: true
          cache: "maven"

      - name: Lifecycle - Step 1/8 - mvn clean
        run: mvn clean

      - name: Lifecycle - Step 2/8 - mvn validate
        run: mvn validate
        
      - name: Lifecycle - Step 3/8 - mvn compile
        run: mvn compile

      - name: Lifecycle - Step 4/8 - mvn test (with skipTests=true)
        run: mvn test

      - name: Lifecycle - Step 5/8 - mvn package
        run: mvn package

      - name: Lifecycle - Step 6/8 - mvn verify
        run: mvn verify

      - name: Lifecycle - Step 7/8 - mvn install
        run: mvn install

      - name: Lifecycle - Step 8/8 - mvn site
        run: mvn site

  # test-embedded:
  #   runs-on: ubuntu-latest
  #   needs: test-mvn-livecycle
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0

  #     - uses: actions/setup-java@v2
  #       with:
  #         distribution: "adopt"
  #         java-version: "8"
  #         check-latest: true
  #         cache: "maven"

  #     - name: Prepare embedded tests - Step 1/3 - mvn clean
  #       run: mvn clean
        
  #     - name: Prepare embedded tests - Step 2/3 - mvn compile
  #       run: mvn compile

  #     - name: Prepare embedded tests - Step 3/3 - mvn test (with skipTests=true)
  #       run: mvn test

  #     - name: Run tests against jetty embedded server
  #       run: mvn test -DskipTests=false

  test-jetty:
    runs-on: ubuntu-latest
    needs: test-mvn-livecycle
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "8"
          check-latest: true
          cache: "maven"

      - name: Prepare external tests - Step 1/3 - mvn clean
        run: mvn clean
        
      - name: Prepare external tests - Step 2/3 - mvn compile
        run: mvn compile

      - name: Prepare external tests - Step 3/3 - mvn test (with skipTests=true)
        run: mvn test

      - name: Build the jetty docker stack
        run: |
          docker image build -f Dockerfile.jetty -t plantuml-server:local .
          docker run -d -p 8080:8080 -e BASE_URL=plantuml plantuml-server:local

      - name: Check running containers
        run: docker ps

      - name: run tests against jetty docker image
        run: mvn test -DskipTests=false -DargLine="-Dsystem.test.server=http://localhost:8080/plantuml"

  test-tomcat:
    runs-on: ubuntu-latest
    needs: test-mvn-livecycle
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "8"
          check-latest: true
          cache: "maven"

      - name: Prepare external tests - Step 1/3 - mvn clean
        run: mvn clean
        
      - name: Prepare external tests - Step 2/3 - mvn compile
        run: mvn compile

      - name: Prepare external tests - Step 3/3 - mvn test (with skipTests=true)
        run: mvn test

      - name: Build the tomcat docker stack
        run: |
          docker image build -f Dockerfile.tomcat -t plantuml-server:local .
          docker run -d -p 8080:8080 -e BASE_URL=plantuml plantuml-server:local

      - name: Check running containers
        run: docker ps

      - name: run tests against tomcat docker image
        run: mvn test -DskipTests=false -DargLine="-Dsystem.test.server=http://localhost:8080/plantuml"
